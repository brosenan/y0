(ns c0)

;; # $c_0$ is not C

;; ## Function Definition
(all [t name args stmts]
     [:func_def t name args & stmts] =>
     (assert
      (statements stmts)))

;; ## Statements
(all [stmts]
     (statements stmts ! "Invalid statement vector:" stmts))

(all [stmt stmts]
     (statements [stmt & stmts]) <-
     (statement stmt stmts))
(all []
     (statements []))

(all [stmt stmts]
     (statement stmt stmts ! "Invalid statement" stmt))

(all [t v x stmts]
     (statement [:vardef t v x] stmts) <-
     (expr-of-type x t)
     (given (all [] (typeof v t))
            (statements stmts)))

;; ## Expressions
(all [x t]
     (expr-of-type x t) <-
     (typeof x t))

(all [x y]
     (typeof x t ! "Invalid expression" x))

(all [x t]
     (expr-of-type [:expr x] t) <-
     (expr-of-type x t))

(all [n t]
     (expr-of-type [:float n] t) <-
     (float-type t ! "when assigning floating point literal" n))

(all [n t]
     (expr-of-type [:int n] t))

;; ## Types
(all [t]
     (float-type t ! t "is not a floating-point type"))

(all [] (float-type [:float32_type]))
(all [] (float-type [:float64_type]))