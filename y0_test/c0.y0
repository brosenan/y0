(ns c0)

;; # $c_0$ is not C

;; ## Function Definition
(all [t name args stmts]
     [:func_def t name args & stmts] =>
     (assert
      (statements stmts)))

;; ## Statements
(all [stmts]
     (statements stmts ! "Invalid statement vector:" stmts))

(all [stmt stmts]
     (statements [stmt & stmts]) <-
     (statement stmt stmts))
(all []
     (statements []))

(all [stmt stmts]
     (statement stmt stmts ! "Invalid statement" stmt))

(all [t v x stmts]
     (statement [:vardef t v x] stmts) <-
     (expr-of-type x t)
     (given (all [] (typeof v t))
            (statements stmts)))

(all [v x stmts]
     (statement [:implicit_vardef v x] stmts) <-
     (exist [t]
            (typeof x t)
            (given (all [] (typeof v t))
                   (statements stmts))))

;; ## Expressions
(all [x t]
     (expr-of-type x t) <-
     (exist [t']
            (typeof x t')
            (assignable t t' ! "Type mismatch. Expression" x "is of type" t'
                        "but type" t "was expected")))

(all [x t]
     (expr-of-type [:expr x] t) <-
     (expr-of-type x t))

(all [x y]
     (typeof x t ! "Invalid expression" x))

(all [x t]
     (typeof [:expr x] t) <-
     (typeof x t))

(all [n t]
     (expr-of-type [:float n] t) <-
     (float-type t ! "when assigning floating point literal" n))

(all [n t]
     (expr-of-type [:int n] t))

(all [n t]
     (typeof [:int n] [:int64_type]))

(all [n t]
     (typeof [:float n] [:float64_type]))

(all [t]
     (expr-of-type [:null] t) <-
     (exist [t']
            (= t [:pointer_type t']
               ! ? "can only be assigned to a pointer type. Given " t "instead")))

;; ### Arithmetic Operators
(all [op]
     (arith-binop op) =>
     (all [t a b]
          (expr-of-type [op a b] t) <-
          (expr-of-type a t)
          (expr-of-type b t)))
(all [op]
     (arith-uniop op) =>
     (all [t a]
          (expr-of-type [op a] t) <-
          (expr-of-type a t)))

(arith-binop :add)
(arith-binop :sub)
(arith-binop :mult)
(arith-binop :div)
(arith-binop :mod)

(arith-uniop :minus)

;; ### Pointers
(all [x t]
     (typeof [:addressof x] [:pointer_type t]) <-
     (typeof x t))

;; ## Types
(all [t]
     (float-type t ! t "is not a floating-point type"))

(all [] (float-type [:float32_type]))
(all [] (float-type [:float64_type]))

;; ### Type Assignability
(all [t1 t2]
     (assignable t1 t2) <-
     (= t1 t2))

(all [t1-kw t2]
     (assignable [t1-kw] t2) <-
     (exist [assignable-to-t1]
            (symbolize assignable-to [t1-kw] assignable-to-t1)
            (assignable-to-t1 t2)))

(all [t src-ts
      assignable-to-t]
     (def-assignable t src-ts) =>
     (assert
      (exist [t-kw]
             (= t [t-kw])
             (symbolize assignable-to [t-kw] assignable-to-t)))
     (all [t']
          (assignable-to-t t' 
                           ! "Type" t' "cannot be used in this context:"))
     (all []
          (assignable-to-t t))
     (def-assignable' assignable-to-t src-ts))

(all [assignable-to-t src-t src-ts]
     (def-assignable' assignable-to-t [src-t & src-ts]) =>
     (all []
          (assignable-to-t src-t))
     (def-assignable' assignable-to-t src-ts))

(def-assignable [:int8_type] [])
(def-assignable [:int16_type] [[:int8_type]
                               [:uint8_type]])
(def-assignable [:int32_type] [[:int8_type] [:int16_type]
                               [:uint8_type] [:uint16_type]])
(def-assignable [:int64_type] [[:int8_type] [:int16_type] [:int32_type]
                               [:uint8_type] [:uint16_type] [:uint32_type]])

(def-assignable [:uint8_type] [])
(def-assignable [:uint16_type] [[:uint8_type]
                                [:int8_type]])
(def-assignable [:uint32_type] [[:uint8_type] [:uint16_type]
                                [:int8_type] [:int16_type]])
(def-assignable [:uint64_type] [[:uint8_type] [:uint16_type] [:uint32_type]
                                [:int8_type] [:int16_type] [:int32_type]])

(def-assignable [:float32_type] [[:uint8_type] [:uint16_type]
                                 [:int8_type] [:int16_type]])
(def-assignable [:float64_type] [[:float32_type]
                                 [:uint8_type] [:uint16_type] [:uint32_type]
                                 [:int8_type] [:int16_type] [:int32_type]])